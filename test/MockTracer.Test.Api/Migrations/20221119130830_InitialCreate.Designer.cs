// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MockTracer.Test.Api.Infrastracture.Database;

#nullable disable

namespace MockTracer.Test.Api.Migrations
{
  [DbContext(typeof(BlogDbContext))]
    [Migration("20221119130830_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.11");

            modelBuilder.Entity("MockTracer.Test.Api.Domain.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TopicId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 11, 19, 18, 8, 30, 259, DateTimeKind.Local).AddTicks(2280),
                            Text = "Best!!",
                            TopicId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 11, 19, 18, 8, 30, 259, DateTimeKind.Local).AddTicks(2286),
                            Text = "thanks :)",
                            TopicId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("MockTracer.Test.Api.Domain.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Topics", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Content = "Value Object in Domain Driven Design",
                            Created = new DateTime(2022, 11, 19, 18, 8, 30, 259, DateTimeKind.Local).AddTicks(2907),
                            Title = "Value Object"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            Content = "Domian Event in Domain Driven Design",
                            Created = new DateTime(2022, 11, 19, 18, 8, 30, 259, DateTimeKind.Local).AddTicks(2909),
                            Title = "Domian Event"
                        });
                });

            modelBuilder.Entity("MockTracer.Test.Api.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nick")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "don@local.local",
                            Nick = "Don"
                        },
                        new
                        {
                            Id = 2,
                            Email = "Bob@local.local",
                            Nick = "Bob"
                        });
                });

            modelBuilder.Entity("MockTracer.Test.Api.Domain.Comment", b =>
                {
                    b.HasOne("MockTracer.Test.Api.Domain.Topic", "Topic")
                        .WithMany("Comments")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MockTracer.Test.Api.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MockTracer.Test.Api.Domain.Topic", b =>
                {
                    b.HasOne("MockTracer.Test.Api.Domain.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("MockTracer.Test.Api.Domain.Topic", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
